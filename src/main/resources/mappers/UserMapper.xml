<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace = "com.juhyang.mbting.user.dao.UserDAO">
	<insert id="InsertUser" parameterType = "map">
	INSERT INTO `user`
	(`loginId`,
	 `password`,
	 `userName`,
	 `birthday`,
	 `sex`,
	 `mbti`,
	 `email`,
	 `createdAt`,
	 `updatedAt`
	)
	VALUES(
	#{loginId},
	#{password},
	#{userName},
	#{birthday},
	#{sex},
	#{mbti},
	#{email},
	 now(),
	 now()
	)
	</insert>
	
	<!-- 로그인 아이디, 비밀번호로 사용자 조회 -->
	<select id="selectUser" parameterType="map" resultType="com.juhyang.mbting.user.model.User">
		SELECT 
			`id`
			, `loginId`
			, `mbti`
			, `userName`
			, `email`
			,`introduce`
			, `createdAt`
			, `updatedAt`
			, `sex`
			,`profile`
		FROM
			`user`
		WHERE
			`loginId` = #{loginId} 
			AND `password` = #{password}
	
	</select>
	
	
	<select id = "selectUserById" resultType="com.juhyang.mbting.user.model.User">
	
		SELECT 
			`id`
			, `loginId`
			, `mbti`
			, `userName`
			, `email`
			,`profile`
			,`introduce`
			, `createdAt`
			, `updatedAt`
			, `sex`
		FROM
			`user`
		WHERE
			`id` = #{userId} 
	
	</select>
	
	
	
	<select id = "IsDuplicate" parameterType = "String" resultType ="boolean">
	SELECT count(1) FROM `user` where  `loginId` = #{loginId}; 
	</select>
	
	<select id ="IsEmailExist" parameterType = "String" resultType ="int">
	SELECT
	 count(1) 
	FROM
	  `user` 
	where
	  `email` = #{email}; 
	</select>
	
	<select id ="selectUserByEmail"  parameterType = "String" resultType ="String">
	SELECT
	 `loginId`
	FROM
	  `user` 
	where
	  `email` = #{email}; 
	</select>
	
	<update id = "updatePassword">
	UPDATE `user`
 		SET
 			`password` = #{password}
 		WHERE
 			`loginId` = #{loginId}
	</update>
	<insert id="updateMatchingProfile">
	INSERT INTO `user_character`
	(
	`user_id`,
	`myMerit`,
	`myHobby`,
	`myCharacter`,
	`yourMerit`,
	`yourHobby`,
	`yourCharacter`,
	`age`,
	`updatedAt`)
	
	VALUES(
	
	 #{userId},
	 #{mymerit},
	 #{myHobby},
	 #{myCharacter},
	 #{yourMerit},
	 #{yourHobby},
	 #{yourCharacter},
	 #{age},
	 now()
	)
	ON DUPLICATE KEY
	UPDATE
		`user_id` = #{userId},
		`myMerit` = #{mymerit},
		`myHobby` = #{myHobby},
		`myCharacter` = #{myCharacter},
		`yourMerit` = #{yourMerit},
		`yourHobby` = #{yourHobby},
		`yourCharacter` = #{yourCharacter},
		`age` = #{age},
		`updatedAt` = now()

		

		
	</insert>
	
	<update id ="updateBasicProfile"  parameterType = "map"  >
	UPDATE `user`
	SET
		`userName` = #{userName},
		`introduce` = #{introduce},
		`mbti` = #{mbti},
		`profile` = #{profile},
		`updatedAt` = now()
	WHERE
		`id` = #{userId}
	</update>
	
	<select id ="selectOptions" resultType ="com.juhyang.mbting.user.model.UserCharacter">
	SELECT
		`myMerit`,
		`myHobby`,
		`myCharacter`,
		`yourMerit`,
		`yourHobby`,
		`yourCharacter`,
		`age`
	FROM
		`user_character`
	WHERE
		`user_id` =  #{userId}
	</select>
	
	<select id ="selectOptionsForSeeProfile" resultType ="com.juhyang.mbting.user.model.UserCharacter">
	SELECT
		`myMerit`,
		`myHobby`,
		`myCharacter`,
		`yourMerit`,
		`yourHobby`,
		`yourCharacter`,
		`age`
	FROM
		`user_character`
	WHERE
		`user_id` =  #{userId}
	</select>
	<select id ="selectMeritContent" resultType ="String">
	SELECT
		`content`
	FROM
		`merit`
	</select>

	<select id ="selectHobbyContent" resultType ="String">
	SELECT
		`content`
	FROM
		`hobby`
	</select>
	
	<select id ="selectCharacterContent" resultType ="String">
	SELECT
		`content`
	FROM
		`character`
	</select>
	
	<select id ="selectAgeContent" resultType="String">
		SELECT
		`content`
	FROM
		`age`
	</select>
	<select id ="selectUsers" resultType = "com.juhyang.mbting.user.model.UserCharacter">
	SELECT DISTINCT
		user.id,
        user.sex,
		user_character.myMerit,
		user_character.myHobby,
		user_character.myCharacter,
		user_character.yourMerit,
		user_character.yourHobby,
		user_character.yourCharacter,
		user_character.user_id,
		user_character.age
	FROM
		`user_character`
	INNER JOIN
		`user`
		
	ON user.id = user_character.user_id
	
	INNER JOIN
		`dislike`

		
    WHERE
    	sex != #{sex}
    	
    AND
    	user.id  NOT IN(
    	SELECT 
    		dislike.receiver
        FROM 
        	`dislike`
        WHERE 
        	dislike.sender = #{userId}
    	)	
    AND
    	year(current_date())-year(user.birthday)+1  ${chooseAge}  ${myage}	
	AND
		`receiver` != user.id
	</select>
	
	
	<select id = "getMyage" resultType = "int">
	SELECT 
		year(current_date())-year(birthday)+1
	FROM 
		`user`
	WHERE
		`id` = #{userId}
	</select>
	
	<select id = "getAge"  resultType="String">
	SELECT		
		`age`
	FROM
		`user_character`
	WHERE
		`user_id` =#{userId}	
	</select>
	
	<insert id= "insertLoginTime" >
	INSERT INTO
	`tracelogin`
	(
	`user_id`,
	`createdAt`
	)
	VALUES
	(
	#{userId},
	now()
	)
	
	
	</insert>
	
	
</mapper>